import base64
#ENCRYPTED IN BASE34+MARSHAL+64
#BERLIN_DATA_STORE
def run_base64_code(encoded_code):
    decoded_code = base64.b64decode(encoded_code.encode()).decode()
    exec(decoded_code)

def main(): #ENCRYPTED IN BASE34+MARSHAL+64
    encoded_code = ''
    run_base64_code(encoded_code)
#ENCRYPTED IN BASE34+MARSHAL+64
if __name__ == "__main__":
    main()
    
